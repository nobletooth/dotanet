services:
#  zoo1:
#    image: confluentinc/cp-zookeeper:7.3.2
#    hostname: zoo1
#    container_name: zoo1
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_SERVER_ID: 1
#      ZOOKEEPER_SERVERS: zoo1:2888:3888
#    networks:
#      - dotanet-net
#
#  kafka1:
#    image: confluentinc/cp-kafka:7.3.2
#    hostname: kafka1
#    container_name: kafka1
#    ports:
#      - "9092:9092"
#      - "29092:29092"
#      - "9999:9999"
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://kafka1:29092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
#      KAFKA_BROKER_ID: 1
#      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_JMX_PORT: 9999
#      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
#      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
#      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#    networks:
#      - dotanet-net
#    depends_on:
#      - zoo1
#
#
#  init-kafka:
#    image: confluentinc/cp-kafka:7.2.1
#    depends_on:
#      - kafka1
#    networks:
#      - dotanet-net
#    entrypoint: [ '/bin/sh', '-c' ]
#    command: |
#      "
#      # blocks until kafka is reachable
#      kafka-topics --bootstrap-server kafka1:29092 --list
#
#      echo -e 'Creating kafka topics'
#      kafka-topics --bootstrap-server kafka1:29092 --create --if-not-exists --topic clickview --replication-factor 1 --partitions 1
#
#      echo -e 'Successfully created the following topics:'
#      kafka-topics --bootstrap-server kafka1:29092 --list
#      "

  zookeeper:
    # image: zookeeper:3.8.4
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    ports:
      - 2181:2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      # - zookeeper-data:/data
      - zookeeper-logs:/var/lib/zookeeper/log
      # - zookeeper-logs:/log
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
    kafka:
      # image: apache/kafka:3.7.1
      image: &kafka-image confluentinc/cp-server:7.5.0
      depends_on:
        zookeeper:
          condition: service_healthy
      #    ports:
      #      - 29092:29092
      #      - 9092:9092
      restart: unless-stopped
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_CLUSTER_ID: "my-kafka-cluster"
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        # KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
        KAFKA_ADVERTISED_LISTENERS: DOCKER://kafka:9092,HOST://localhost:29092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: HOST
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        # KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        # KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        # KAFKA_CREATE_TOPICS: "click_events:3:1,impression_events:3:1"

      volumes:
        - kafka-data:/var/lib/kafka/data
        # - kafka-data:/opt/kafka/data
        - kafka-docker-sock:/var/run/docker.sock
      healthcheck:
        test: kafka-topics --bootstrap-server kafka:9092 --list
        interval: 30s
        timeout: 10s
        retries: 3
    init-kafka:
      image: *kafka-image
      entrypoint: /bin/bash -c "kafka-topics --create --if-not-exists --topic clickview --replication-factor=1 --partitions=3 --bootstrap-server kafka:9092 && exit 0"
      depends_on:
        kafka:
          condition: service_healthy

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 1s
      timeout: 10s
      retries: 5

  adserver:
    build:
      context: .
      dockerfile: Dockerfile
      target: adserver
    image: adserver
    ports:
      - "8081:8081"
    command: [
      "./bin",
      "-adserverurl", "${ADSERVER_URL_PROJECT}",
      "-panelurlads", "${PANEL_URL_INSIDE}",
      "-panelurlpic", "${PANEL_URL_OUTSIDE}",
      "-eventserviceurl", "${EVENTSERVICE_OUTSIDE}",
      "-newAdTreshold", "${NEW_AD_THRESHOLD}",
      "-newAdProb", "${NEW_AD_PROB}",
      "-expAdProb", "${EXP_AD_PROB}"
    ]
    depends_on:
      postgres:
        condition: service_healthy
      panel:
        condition: service_healthy
    container_name: adserver

  eventservice:
    build:
      context: .
      dockerfile: Dockerfile
      target: eventservice
    image: eventservice
    ports:
      - "8082:8082"
    command: [
      "./bin",
      "-dbuser", "${DB_USER}",
      "-dbpassword", "${DB_PASSWORD}",
      "-dbname", "${DB_NAME}",
      "-dbport", "${DB_PORT}",
      "-dbhost", "${DB_HOST}",
      "-eventserviceurl", "${EVENTSERVICE_URL_PROJECT}",
      "-panelserviceurl", "${PANEL_URL_INSIDE}",
      "-kafkaendpoint", "${KAFKA_ENDPOINT}"
    ]
    depends_on:
      postgres:
        condition: service_healthy
    container_name: eventservice

  reporter:
    build:
      context: .
      dockerfile: Dockerfile
      target: reporter
    image: reporter
    ports:
      - "8080:8080"
    command: [
      "./bin",
      "-dbuser", "${DB_USER}",
      "-dbpassword", "${DB_PASSWORD}",
      "-dbname", "${DB_NAME}",
      "-dbport", "${DB_PORT}",
      "-dbhost", "${DB_HOST}",
      "-kafkaendpoint", "${KAFKA_ENDPOINT}",
    ]
    depends_on:
      postgres:
        condition: service_healthy
      eventservice:
        condition: service_started
    container_name: reporter

  panel:
    build:
      context: .
      dockerfile: Dockerfile
      target: panel
    image: panel
    ports:
      - "8085:8085"
    command: [
      "./bin",
      "-dbuser", "${DB_USER}",
      "-dbpassword", "${DB_PASSWORD}",
      "-dbname", "${DB_NAME}",
      "-dbport", "${DB_PORT}",
      "-dbhost", "${DB_HOST}",
      "-panelurl", "${PANEL_URL_PROJECT}",
      "-adserverurl", "${ADSERVER_URL_OUTSIDE}"
    ]
    depends_on:
      postgres:
        condition: service_healthy
    container_name: panel
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8085/ads/list || exit 1" ]  # Adjust port as needed
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./panel/image:/app/panel/image

  publisherwebsite:
    build:
      context: .
      dockerfile: Dockerfile
      target: publisherwebsite
    image: publisherwebsite
    ports:
      - "8084:8084"
    command: [
      "./bin",
      "-publisherservice", "${PUBLISHER_URL_PROJECT}",
      "-panelurl", "${PANEL_URL_OUTSIDE}"
    ]
    depends_on:
      postgres:
        condition: service_healthy
    container_name: publisherwebsite

  screper:
    build:
      context: .
      dockerfile: Dockerfile
      target: screper
    image: screper
    ports:
      - "8089:8089"
    command: [
      "./bin",
      "-dbuser", "${DB_USER}",
      "-dbpassword", "${DB_PASSWORD}",
      "-dbname", "${DB_NAME}",
      "-dbport", "${DB_PORT}",
      "-dbhost", "${DB_HOST}",
      "-port","${SCRAPER_PORT}"
    ]
    depends_on:
      postgres:
        condition: service_healthy
      panel:
        condition: service_started
      publisherwebsite:
        condition: service_started
    container_name: screper

volumes:
  pgdata:
