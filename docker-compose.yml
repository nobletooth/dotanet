version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  adserver:
    build:
      context: .
      dockerfile: Dockerfile
      target: adserver
    image: adserver
    command: [
      "./adserver",
      "-adserverurl", "${ADSERVER_URL_PROJECT}",
      "-panelurlads", "${PANEL_URL_INSIDE}",
      "-panelurlpic", "${PANEL_URL_OUTSIDE}",
      "-eventserviceurl", "${EVENTSERVICE_OUTSIDE}",
      "-newAdTreshold", "${NEW_AD_THRESHOLD}",
      "-newAdProb", "${NEW_AD_PROB}",
      "-expAdProb", "${EXP_AD_PROB}"
    ]
    depends_on:
      postgres:
        condition: service_healthy
    container_name: adserver

  eventservice:
    build:
      context: .
      dockerfile: Dockerfile
      target: eventservice
    image: eventservice
    command: [
      "./eventservice",
      "-dbuser", "${DB_USER}",
      "-dbpassword", "${DB_PASSWORD}",
      "-dbname", "${DB_NAME}",
      "-dbport", "${DB_PORT}",
      "-dbhost", "${DB_HOST}",
      "-eventserviceurl", "${EVENTSERVICE_URL_PROJECT}"
    ]
    depends_on:
      postgres:
        condition: service_healthy
      panel:
        condition: service_started
    container_name: eventservice

  panel:
    build:
      context: .
      dockerfile: Dockerfile
      target: panel
    image: panel
    ports:
      - "8085:8085"
    command: [
      "./panel",
      "-dbuser", "${DB_USER}",
      "-dbpassword", "${DB_PASSWORD}",
      "-dbname", "${DB_NAME}",
      "-dbport", "${DB_PORT}",
      "-dbhost", "${DB_HOST}",
      "-panelurl", "${PANEL_URL_PROJECT}",
      "-adserverurl", "${ADSERVER_URL_OUTSIDE}"
    ]
    depends_on:
      postgres:
        condition: service_healthy
    container_name: panel

  publisherwebsite:
    build:
      context: .
      dockerfile: Dockerfile
      target: publisherwebsite
    image: publisherwebsite
    ports:
      - "8084:8084"
    command: [
      "./publisherwebsite",
      "-publisherservice", "${PUBLISHER_URL_PROJECT}",
      "-panelurl", "${PANEL_URL_OUTSIDE}"
    ]
    depends_on:
      postgres:
        condition: service_healthy
      panel:
        condition: service_started
      eventservice:
        condition: service_started
      adserver:
        condition: service_started
    container_name: publisherwebsite


  screper:
    build:
      context: .
      dockerfile: Dockerfile
      target: screper
    image: screper
    ports:
      - "8089:8089"
    command: [
      "./screper",
      "-dbuser", "${DB_USER}",
      "-dbpassword", "${DB_PASSWORD}",
      "-dbname", "${DB_NAME}",
      "-dbport", "${DB_PORT}",
      "-dbhost", "${DB_HOST}",
    ]
    depends_on:
      postgres:
        condition: service_healthy
      panel:
        condition: service_started
    container_name: screper

volumes:
  pgdata:
