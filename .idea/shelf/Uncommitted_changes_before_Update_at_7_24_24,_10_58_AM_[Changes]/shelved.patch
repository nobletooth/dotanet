Index: adserver/adRetriever.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/nobletooth/dotanet/tree/main/common\"\n)\n\nvar url string\n\nfunc init() {\n\tflag.StringVar(&url, \"getAllAdsUrl\", \"http://localhost:8081/ads/list/\", \"get all ads url\")\n}\n\nfunc GetAdsListPeriodically() []common.AdInfo {\n\tticker := time.NewTicker(1 * time.Minute)\n\tdefer ticker.Stop()\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tresponse, err := http.Get(url)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"Error fetching ads list:\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tdefer response.Body.Close()\n\n\t\t\tif response.StatusCode == http.StatusOK {\n\t\t\t\tvar ads []common.AdInfo\n\t\t\t\terr = json.NewDecoder(response.Body).Decode(&ads)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Println(\"Error decoding response body:\", err)\n\t\t\t\t} else {\n\t\t\t\t\tlog.Println(\"Ads list fetched successfully\")\n\t\t\t\t\tallAds = ReturnAllAds(ads)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.Println(\"Failed to fetch ads list, status code:\", response.StatusCode)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc ReturnAllAds(ads []common.AdInfo) []common.AdInfo {\n\tif ads == nil {\n\t\tlog.Println(\"No ads found\")\n\t\treturn []common.AdInfo{}\n\t}\n\tfor _, ad := range ads {\n\t\tlog.Printf(\"Ad ID: %d, Title: %s\", ad.Id, ad.Title)\n\t}\n\treturn ads\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/adserver/adRetriever.go b/adserver/adRetriever.go
--- a/adserver/adRetriever.go	(revision d2db0d7456c702ca6e736ee96ae0f14bc2ce6cf6)
+++ b/adserver/adRetriever.go	(date 1721803420960)
@@ -7,7 +7,7 @@
 	"net/http"
 	"time"
 
-	"github.com/nobletooth/dotanet/tree/main/common"
+	//"github.com/nobletooth/dotanet/tree/main/common"
 )
 
 var url string
@@ -16,7 +16,7 @@
 	flag.StringVar(&url, "getAllAdsUrl", "http://localhost:8081/ads/list/", "get all ads url")
 }
 
-func GetAdsListPeriodically() []common.AdInfo {
+func GetAdsListPeriodically() []AdInfo {
 	ticker := time.NewTicker(1 * time.Minute)
 	defer ticker.Stop()
 	for {
@@ -30,7 +30,7 @@
 			defer response.Body.Close()
 
 			if response.StatusCode == http.StatusOK {
-				var ads []common.AdInfo
+				var ads []AdInfo
 				err = json.NewDecoder(response.Body).Decode(&ads)
 				if err != nil {
 					log.Println("Error decoding response body:", err)
@@ -45,10 +45,10 @@
 	}
 }
 
-func ReturnAllAds(ads []common.AdInfo) []common.AdInfo {
+func ReturnAllAds(ads []AdInfo) []AdInfo {
 	if ads == nil {
 		log.Println("No ads found")
-		return []common.AdInfo{}
+		return []AdInfo{}
 	}
 	for _, ad := range ads {
 		log.Printf("Ad ID: %d, Title: %s", ad.Id, ad.Title)
Index: panel/common/db.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package common\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\n\nvar DB *gorm.DB\n\nvar (\n\tuser     string\n\tpassword string\n\tdbname   string\n\tport     string\n\thost     string\n)\n\nfunc init() {\n\tflag.StringVar(&user, \"dbuser\", \"postgres\", \"Database user\")\n\tflag.StringVar(&password, \"dbpassword\", \"Ala.13495782\", \"Database password\")\n\tflag.StringVar(&dbname, \"dbname\", \"todo\", \"Database name\")\n\tflag.StringVar(&port, \"dbport\", \"5432\", \"Database port\")\n\tflag.StringVar(&host, \"dbhost\", \"localhost\", \"Database host\")\n}\n\nfunc NewDatabase() error {\n\tdsn := fmt.Sprintf(\"host=%s user=%s password=%s dbname=%s port=%s sslmode=disable\",\n\t\thost, user, password, dbname, port)\n\n\tvar err error\n\tDB, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to connect to database: %w\", err)\n\t}\n\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to migrate database: %w\", err)\n\t}\n\n\treturn nil\n}\n\nfunc Close() error {\n\tsqlDB, err := DB.DB()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn sqlDB.Close()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/panel/common/db.go b/panel/common/db.go
--- a/panel/common/db.go	(revision d2db0d7456c702ca6e736ee96ae0f14bc2ce6cf6)
+++ b/panel/common/db.go	(date 1721803442202)
@@ -19,15 +19,15 @@
 
 func init() {
 	flag.StringVar(&user, "dbuser", "postgres", "Database user")
-	flag.StringVar(&password, "dbpassword", "Ala.13495782", "Database password")
-	flag.StringVar(&dbname, "dbname", "todo", "Database name")
+	//flag.StringVar(&password, "dbpassword", "Ala.13495782", "Database password")
+	flag.StringVar(&dbname, "dbname", "test", "Database name")
 	flag.StringVar(&port, "dbport", "5432", "Database port")
 	flag.StringVar(&host, "dbhost", "localhost", "Database host")
 }
 
 func NewDatabase() error {
-	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable",
-		host, user, password, dbname, port)
+	dsn := fmt.Sprintf("host=%s user=%s password= dbname=%s port=%s sslmode=disable",
+		host, user, dbname, port)
 
 	var err error
 	DB, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"43c6eb8c-6db5-4240-a1c0-4ea8813a9e66\" name=\"Changes\" comment=\"correct html addresses.\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/panel/publisher/script/digikala.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/panel/publisher/script/digikala.js\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"git-widget-placeholder\": \"main\"\n  }\n}]]></component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"correct html addresses.\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"correct html addresses.\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision d2db0d7456c702ca6e736ee96ae0f14bc2ce6cf6)
+++ b/.idea/workspace.xml	(date 1721803442238)
@@ -1,3 +1,39 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="f8ed6db7-41c3-4a9e-bc49-5dabb551b94b" name="Changes" comment="Add GetAd api">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/adserver/adRetriever.go" beforeDir="false" afterPath="$PROJECT_DIR$/adserver/adRetriever.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/adserver/auction.go" beforeDir="false" afterPath="$PROJECT_DIR$/adserver/auction.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/adserver/main.go" beforeDir="false" afterPath="$PROJECT_DIR$/adserver/main.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/panel/common/db.go" beforeDir="false" afterPath="$PROJECT_DIR$/panel/common/db.go" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="ProjectLevelVcsManager">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "git-widget-placeholder": "main"
+  },
+  "keyToStringList": {
+    "DatabaseDriversLRU": [
+      "postgresql"
+    ]
+  }
+}]]></component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="Add GetAd api" />
+    <option name="LAST_COMMIT_MESSAGE" value="Add GetAd api" />
+  </component>
+</project>
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="AutoImportSettings">
